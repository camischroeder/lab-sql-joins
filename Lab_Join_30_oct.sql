/* Challenge - Joining on multiple tables
Write SQL queries to perform the following tasks using the Sakila database:*/

#1. List the number of films per category.
select count(film_category.film_id) as total_per_cat, category.name as category
from film_category
join category
on film_category.category_id = category.category_id
group by category.name;

#2. Retrieve the store ID, city, and country for each store.
select store.store_id,  
	(select country.country
	from country
	inner join city
	on country.country_id = city.country_id
    where city.city_id = address.city_id) as country,
    (select city.city
    from city
    where city.city_id = address.city_id) as city
from store 
inner join address
on store.address_id = address.address_id;

#3.  Calculate the total revenue generated by each store in dollars.
select store.store_id, 
	(select format(sum(payment.amount), 2) as dollars
	from payment
    where payment.staff_id = staff.staff_id) as value_per_store
from store
join staff
on store.store_id = staff.store_id;

#4.  Determine the average running time of films for each category.
select avg(film.length) as avg_length,
category.name as category
from film
inner join film_category on film.film_id = film_category.film_id
inner join category ON film_category.category_id = category.category_id
group by category.name;

#**Bonus**:
#5.  Identify the film categories with the longest average running time.
select avg(film.length) as avg_length,
category.name as category
from film
inner join film_category on film.film_id = film_category.film_id
inner join category ON film_category.category_id = category.category_id
group by category.name
order by avg_length desc;

#6.  Display the top 10 most frequently rented movies in descending order.
select film.title, count(rental.rental_id) as rental_count 
from film
inner join inventory
on film.film_id = inventory.film_id
inner join rental
on inventory.inventory_id = rental.inventory_id
group by film.title
order by rental_count desc
limit 10;

#7. Determine if "Academy Dinosaur" can be rented from Store 1.
#yes
select film.title like "%academy dinosaur%" as film,
store.store_id like 1 as 'available at Store:'
from film
inner join store
on film.film_id = store.store_id;

/*8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 
titles that are not in the inventory, and this information can be obtained using a `CASE` statement 
combined with `IFNULL`."*/